var documenterSearchIndex = {"docs":
[{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"EditURL = \"<unknown>/literate/OHP simulation.jl\"","category":"page"},{"location":"manual/OHP simulation/#ASETS-II-cases-simulation","page":"Simulation","title":"ASETS-II cases simulation","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"This is an example of a simulation package for conjugate heat transfer of an   oscillating heat pipe. SI units are used and units are emitted","category":"page"},{"location":"manual/OHP simulation/#What-do-we-need-to-solve-an-OHP-problem?","page":"Simulation","title":"What do we need to solve an OHP problem?","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"specify properties : Solid property, Fluid property","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"set the geometries : Computational domain, Heaters/Condensers, OHP shapes","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"construct the systems : Fluid system(1D), HeatConduction system(2D)","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"initialize : initialize the integrators and the data structs for saving","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"solve : time marching to solve the two weakly coupled integrators   alternately","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"save/examine : save the data for post-processing","category":"page"},{"location":"manual/OHP simulation/#Packages","page":"Simulation","title":"Packages","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"Firstly, let's import the necessary packages, you may need to install them   for the first time.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"using ComputationalHeatTransfer # our main package\nusing Plots # for plotting\nusing ProgressMeter # to have a progress bar in the calculation","category":"page"},{"location":"manual/OHP simulation/#Specify-properties","page":"Simulation","title":"Specify properties","text":"","category":"section"},{"location":"manual/OHP simulation/#Solid-Physical-parameters","page":"Simulation","title":"Solid Physical parameters","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"params is the HeatConductionParameters for the plate material. The numbers   below represents aluminum.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"ρₛ = 2730; # material density [kg/m^3]\ncₛ  = 8.93e02; # material specific heat [J/kg K]\nkₛ  = 1.93e02; # material heat conductivity\nplate_d = 1.5e-3; # effective d (The thickness of an ideal uniform thickness plate occupying the same volume)\nparams = HeatConductionParameters(ρₛ ,cₛ ,kₛ ,thickness=plate_d)","category":"page"},{"location":"manual/OHP simulation/#Fluid-Physical-parameters","page":"Simulation","title":"Fluid Physical parameters","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"pfluid contains the vapor and liquid properties at a constant reference   temperature. Noted that the vapor pressure and the vapor density will be   functions of temperatures during the simulation, other properties are   extracted from pfluid as an approximate value.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"Tref = 291.2 # reference temperature\nfluid_type = \"Butane\"\np_fluid = SaturationFluidProperty(fluid_type,Tref)","category":"page"},{"location":"manual/OHP simulation/#Set-the-geometries","page":"Simulation","title":"Set the geometries","text":"","category":"section"},{"location":"manual/OHP simulation/#Geometry-parameters","page":"Simulation","title":"Geometry parameters","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"The 2D domain is of rectangular shape (slightly different from ASETS-II). In   the future it can be of arbitrary shape using the immersedlayers.jl package.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"Lx = 0.1524; # plate size x [m]\nLy = 0.0648; # plate size y [m]\nxlim = (-Lx/2,Lx/2) # plate x limits\nylim = (-Ly/2,Ly/2) # plate y limits","category":"page"},{"location":"manual/OHP simulation/#Set-mesh-size-and-maximum-time-step-for-plate-heat-conduction","page":"Simulation","title":"Set mesh size and maximum time step for plate heat conduction","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"Δx is controlled by Δx = α*gridPe and set having the same order of magitute   of tube diameter 1e-3. Fourier number is used to give a safety \"cap\" of time   step you can choose in the fluid module","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"Δx,Δt_max = setstepsizes(params.α,gridPe=8.0,fourier=0.3)","category":"page"},{"location":"manual/OHP simulation/#Set-up-the-evaporators-and-condensers","page":"Simulation","title":"Set up the evaporators and condensers","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"Right now, the OHPtype looks up a preset dictionary of OHP evaporators and   condensers.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"You can also customize them in the OHP DIY notebook","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"OHPtype = \"ASETS-II OHP 2 LARGE HEATER\"\npower = 40 # total heater power in watts\nTc = Tref; # condenser temperature\neparams,cparams = OHPConfiguration(OHPtype,power,Tc,Δx);\nnothing #hide","category":"page"},{"location":"manual/OHP simulation/#Set-up-OHP-channel's-shape","page":"Simulation","title":"Set up OHP channel's shape","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"constructohpcurve is a built-in function that generates two arrays: x that   contains all x values of the discrete points, and y contains all y values. x   and y have the same length.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"You can also customize this function to generate an OHP shape of your choice   as long as they produce x array and y array.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"x, y = construct_ohp_curve(\"ASETS\",Δx) # get x and y coordinates for the channel\nohp = BasicBody(x,y) # build a BasicBody based on x,y\n\nohpgeom = ComputationalHeatTransfer.LineSourceParams(ohp) # build a line heat source based on BasicBody","category":"page"},{"location":"manual/OHP simulation/#Plot-what-you-got-so-far","page":"Simulation","title":"Plot what you got so far","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"This is a exmaple of the compuational domain (the box) and the OHP channel   serpentine (in blue)","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"# plot ohp\nplt = plot(ohp,fillalpha=0,linecolor=:black,xlims=xlim,ylims=ylim,framestyle = :box,xlabel=\"x [m]\",ylabel=\"y [m]\")\n\n# plot heaters (red)\nfor ep in eparams\n    plot!(ep)\nend\n\n# plot condensers (blue)\nfor cp in cparams\n    plot!(cp)\nend\n\n# show plot\nplt","category":"page"},{"location":"manual/OHP simulation/#Construct-the-systems","page":"Simulation","title":"Construct the systems","text":"","category":"section"},{"location":"manual/OHP simulation/#Create-HeatConduction-system","page":"Simulation","title":"Create HeatConduction system","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"The solid module dealing with the 2D conduction, evaporator, condenser, and   the OHP line heat source is constructed here.","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"sys_plate = HeatConduction(params,Δx,xlim,ylim,Δt_max,qline=ohpgeom,qflux=eparams,qmodel=cparams)","category":"page"},{"location":"manual/OHP simulation/#Create-OHP-inner-channel-system","page":"Simulation","title":"Create OHP inner channel system","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"sys_tube: fluid module system","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"sys_tube = initialize_ohpsys(sys_plate,p_fluid,power)","category":"page"},{"location":"manual/OHP simulation/#Initialize","page":"Simulation","title":"Initialize","text":"","category":"section"},{"location":"manual/OHP simulation/#set-time-step","page":"Simulation","title":"set time step","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"tspan = (0.0, 5.0); # start time and end time\ndt_record = 0.01   # saving time interval\n\ntstep = 1e-3     # actrual time marching step","category":"page"},{"location":"manual/OHP simulation/#combine-inner-tube-and-plate-together","page":"Simulation","title":"combine inner tube and plate together","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"u_plate = newstate(sys_plate) .+ Tref # initialize plate T field to uniform Tref\nintegrator_plate = init(u_plate,tspan,sys_plate) # construct integrator_plate\n\nu_tube = newstate(sys_tube) # initialize OHP tube\nintegrator_tube = init(u_tube,tspan,sys_tube); # construct integrator_tube\nnothing #hide","category":"page"},{"location":"manual/OHP simulation/#initialize-arrays-for-saving","page":"Simulation","title":"initialize arrays for saving","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"SimuResult = SimulationResult(integrator_tube,integrator_plate);\nnothing #hide","category":"page"},{"location":"manual/OHP simulation/#Solve","page":"Simulation","title":"Solve","text":"","category":"section"},{"location":"manual/OHP simulation/#Run-the-simulation-and-store-data","page":"Simulation","title":"Run the simulation and store data","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"@showprogress for t in tspan[1]:tstep:tspan[2]\n\n    timemarching!(integrator_tube,integrator_plate,tstep)\n\n    if (mod(integrator_plate.t,dt_record) < 1e-6) || (mod(-integrator_plate.t,dt_record) < 1e-6)\n        store!(SimuResult,integrator_tube,integrator_plate)\n    end\n\nend","category":"page"},{"location":"manual/OHP simulation/#Store-data","page":"Simulation","title":"Store data","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"save_path = \"../numedata/solution.jld2\"\nsave(save_path,\"SimulationResult\",SimuResult)","category":"page"},{"location":"manual/OHP simulation/#take-a-peek-at-the-solution-(more-at-the-PostProcessing-notebook)","page":"Simulation","title":"take a peek at the solution (more at the PostProcessing notebook)","text":"","category":"section"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"@gif for i in eachindex(SimuResult.tube_hist_t)\n    plot(OHPTemp(),i,SimuResult,clim=(291.2,294.0))\nend","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"","category":"page"},{"location":"manual/OHP simulation/","page":"Simulation","title":"Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"EditURL = \"<unknown>/literate/OHP DIY.jl\"","category":"page"},{"location":"manual/OHP DIY/#DIY","page":"OHP-DIY","title":"DIY","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"This notebooks shows how to custimize the heater/condenser and ohp configuration","category":"page"},{"location":"manual/OHP DIY/#Packages","page":"OHP-DIY","title":"Packages","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Firstly, let's import the necessary packages, you may need to install them   for the first time.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"using ComputationalHeatTransfer # our main package\nusing Plots # for plotting\nusing ProgressMeter # to have a progress bar in the calculation","category":"page"},{"location":"manual/OHP DIY/#Specify-properties","page":"OHP-DIY","title":"Specify properties","text":"","category":"section"},{"location":"manual/OHP DIY/#Solid-Physical-parameters","page":"OHP-DIY","title":"Solid Physical parameters","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"params is the HeatConductionParameters for the plate material. The numbers   below represents aluminum.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"ρₛ = 2730; # material density [kg/m^3]\ncₛ  = 8.93e02; # material specific heat [J/kg K]\nkₛ  = 1.93e02; # material heat conductivity\nplate_d = 1.5e-3; # effective d (The thickness of an ideal uniform thickness plate occupying the same volume)\nparams = HeatConductionParameters(ρₛ ,cₛ ,kₛ ,thickness=plate_d)","category":"page"},{"location":"manual/OHP DIY/#Fluid-Physical-parameters","page":"OHP-DIY","title":"Fluid Physical parameters","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"pfluid contains the vapor and liquid properties at a constant reference   temperature. Noted that the vapor pressure and the vapor density will be   functions of temperatures during the simulation, other properties are   extracted from pfluid as an approximate value.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Tref = 291.2 # reference temperature\nfluid_type = \"Butane\"\np_fluid = SaturationFluidProperty(fluid_type,Tref)","category":"page"},{"location":"manual/OHP DIY/#Set-the-geometries","page":"OHP-DIY","title":"Set the geometries","text":"","category":"section"},{"location":"manual/OHP DIY/#Geometry-parameters","page":"OHP-DIY","title":"Geometry parameters","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"The 2D domain is of rectangular shape (slightly different from ASETS-II). In   the future it can be of arbitrary shape using the immersedlayers.jl package.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Lx = 0.1524; # plate size x [m]\nLy = 0.0648; # plate size y [m]\nxlim = (-Lx/2,Lx/2) # plate x limits\nylim = (-Ly/2,Ly/2) # plate y limits","category":"page"},{"location":"manual/OHP DIY/#Set-mesh-size-and-maximum-time-step-for-plate-heat-conduction","page":"OHP-DIY","title":"Set mesh size and maximum time step for plate heat conduction","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Δx is controlled by Δx = α*gridPe and set having the same order of magitute   of tube diameter 1e-3. Fourier number is used to give a safety \"cap\" of time   step you can choose in the fluid module","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Δx,Δt_max = setstepsizes(params.α,gridPe=8.0,fourier=0.3)","category":"page"},{"location":"manual/OHP DIY/#Set-up-the-evaporators-and-condensers","page":"OHP-DIY","title":"Set up the evaporators and condensers","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"In the \"OHP simulation\" notebook, I use \"OHPtype\" to look up a preset dictionary of OHP evaporators and condensers.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"You can also customize them, following the procedure below in this notebook.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Firstly let's give the total heater power","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"power = 30 # total heater power in watts","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Then let's construct a heater","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Lheater_x = Lx*0.1\nLheater_y = Ly*0.9\n\nqe = power/Lheater_x/Lheater_y\n\neb1 = Rectangle(Lheater_x/2,Lheater_x/2,1.5*Δx)\nTfe = RigidTransform((-Lx*0.1,Ly*0.1),0.0)\nTfe(eb1)\n\neparams = [PrescribedHeatFluxRegion(qe,eb1)];\nnothing #hide","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Then let's consctruct a condenser","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Lcondenser_x = Lx*0.2\nLcondenser_y = Ly*0.9\n\nhc = 2000.0 # condenser heat transfer coefficient\n\ncb1 = Rectangle(Lheater_y/2,Lheater_y/2,1.5*Δx)\nTfc = RigidTransform((Lx*0.3,-0.0),0.0)\nTfc(cb1)\n\nTc = Tref\ncparams = [PrescribedHeatModelRegion(hc,Tc,cb1)];\nnothing #hide","category":"page"},{"location":"manual/OHP DIY/#Set-up-OHP-channel's-shape","page":"OHP-DIY","title":"Set up OHP channel's shape","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"Similarly, In the \"OHP simulation\" notebook, I used constructohpcurve(\"ASETS\",Δx) to look up a preset dictionary of ASETS-II OHP.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"You can customize the ohp curve in either of the two ways:","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"simply supply two arrays of x and y of the same length:","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"a = 0.03\nθ = 0:2π/1000:2π\nr = a*sin.(2θ)\nx = r .* cos.(θ)\ny = r .* sin.(θ);\n\nplot(x,y,aspectratio=1)","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"constructohpcurve(nturn, pitch, height, gap, ds, x0, y0, flipx, flipy, angle), a built-in function to generate a closed loop multi-turn channel","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"ds = 1.5Δx # point interval\nnturn = 6 # number of turns\nwidth_ohp = 30*1e-3\nlength_ohp = 70*1e-3\ngap = 1e-3 # gap between the closed loop end to the channel(not the distance between each channels)\npitch = width_ohp/(2*nturn+1) # pitch between channels\nrotation_angle = 3π/8\nx0, y0 = -length_ohp/2 * 1.02, -width_ohp/2 * 0.1 # starting point location\n\nx,y = construct_ohp_curve(nturn,pitch,length_ohp,gap,ds,x0,y0,false,false,rotation_angle)\n\nplot(x,y,aspectratio=1)","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"ohp = BasicBody(x,y) # build a BasicBody based on x,y\nohpgeom = ComputationalHeatTransfer.LineSourceParams(ohp) # build a line heat source based on BasicBody","category":"page"},{"location":"manual/OHP DIY/#Plot-what-you-got-so-far","page":"OHP-DIY","title":"Plot what you got so far","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"This is a exmaple of the compuational domain (the box) and the OHP channel   serpentine (in blue)","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"# plot ohp\nplt = plot(ohp,fillalpha=0,linecolor=:black,xlims=xlim,ylims=ylim,framestyle = :box,xlabel=\"x [m]\",ylabel=\"y [m]\")\n\n# plot heaters (red)\nfor ep in eparams\n    plot!(ep)\nend\n\n# plot condensers (blue)\nfor cp in cparams\n    plot!(cp)\nend\n\n# show plot\nplt","category":"page"},{"location":"manual/OHP DIY/#Construct-the-systems","page":"OHP-DIY","title":"Construct the systems","text":"","category":"section"},{"location":"manual/OHP DIY/#Create-HeatConduction-system","page":"OHP-DIY","title":"Create HeatConduction system","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"The solid module dealing with the 2D conduction, evaporator, condenser, and   the OHP line heat source is constructed here.","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"sys_plate = HeatConduction(params,Δx,xlim,ylim,Δt_max,qline=ohpgeom,qflux=eparams,qmodel=cparams)","category":"page"},{"location":"manual/OHP DIY/#Create-OHP-inner-channel-system","page":"OHP-DIY","title":"Create OHP inner channel system","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"sys_tube: fluid module system","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"sys_tube = initialize_ohpsys(sys_plate,p_fluid,power)","category":"page"},{"location":"manual/OHP DIY/#Initialize","page":"OHP-DIY","title":"Initialize","text":"","category":"section"},{"location":"manual/OHP DIY/#set-time-step","page":"OHP-DIY","title":"set time step","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"tspan = (0.0, 5.0); # start time and end time\ndt_record = 0.01   # saving time interval\n\ntstep = 1e-3     # actrual time marching step","category":"page"},{"location":"manual/OHP DIY/#combine-inner-tube-and-plate-together","page":"OHP-DIY","title":"combine inner tube and plate together","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"u_plate = newstate(sys_plate) .+ Tref # initialize plate T field to uniform Tref\nintegrator_plate = init(u_plate,tspan,sys_plate) # construct integrator_plate\n\nu_tube = newstate(sys_tube) # initialize OHP tube\nintegrator_tube = init(u_tube,tspan,sys_tube); # construct integrator_tube\nnothing #hide","category":"page"},{"location":"manual/OHP DIY/#initialize-arrays-for-saving","page":"OHP-DIY","title":"initialize arrays for saving","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"SimuResult = SimulationResult(integrator_tube,integrator_plate);\nnothing #hide","category":"page"},{"location":"manual/OHP DIY/#Solve","page":"OHP-DIY","title":"Solve","text":"","category":"section"},{"location":"manual/OHP DIY/#Run-the-simulation-and-store-data","page":"OHP-DIY","title":"Run the simulation and store data","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"@showprogress for t in tspan[1]:tstep:tspan[2]\n\n    timemarching!(integrator_tube,integrator_plate,tstep)\n\n    if (mod(integrator_plate.t,dt_record) < 1e-6) || (mod(-integrator_plate.t,dt_record) < 1e-6)\n        store!(SimuResult,integrator_tube,integrator_plate)\n    end\n\nend","category":"page"},{"location":"manual/OHP DIY/#Store-data","page":"OHP-DIY","title":"Store data","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"save_path = \"../numedata/solution.jld2\"\nsave(save_path,\"SimulationResult\",SimuResult)","category":"page"},{"location":"manual/OHP DIY/#take-a-peek-at-the-solution-(more-at-the-PostProcessing-notebook)","page":"OHP-DIY","title":"take a peek at the solution (more at the PostProcessing notebook)","text":"","category":"section"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"@gif for i in eachindex(SimuResult.tube_hist_t)\n    plot(OHPTemp(),i,SimuResult,clim=(291.2,294.0))\nend","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"","category":"page"},{"location":"manual/OHP DIY/","page":"OHP-DIY","title":"OHP-DIY","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"EditURL = \"<unknown>/literate/PostProcessing-oneresult.jl\"","category":"page"},{"location":"manual/PostProcessing-oneresult/#PostProcessing","page":"Post-Processing","title":"PostProcessing","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"This notebook is initially designed for PostProcessing ASETS-II numerical and experimental data.   It can also be used for other configurations's numerical results. But if you want to compare with other experimental data with a different format than ASETS-II. You should find a way to read them to RTD and RTDt in this notebook.","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"using ComputationalHeatTransfer\nusing Plots\nusing Interact","category":"page"},{"location":"manual/PostProcessing-oneresult/#Read-simulation-data","page":"Post-Processing","title":"Read simulation data","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"read_path = \"../numedata/solution.jld2\"\nSimuResult = load(read_path)[\"SimulationResult\"];\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/#get-time-array","page":"Post-Processing","title":"get time array","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"t = SimuResult.tube_hist_t;\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/#Plot-2D-graphs","page":"Post-Processing","title":"Plot 2D graphs","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/#film-and-slug-dynamics","page":"Post-Processing","title":"film and slug dynamics","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"@gif for i in eachindex(t)\n    plot(OHPSlug(),i,SimuResult)\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/#plate-T-[K]","page":"Post-Processing","title":"plate T [K]","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"@gif for i in eachindex(t)\n    plot(OHPTemp(),i,SimuResult,clim=(291.2,294.0))\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/#D-superheat","page":"Post-Processing","title":"2D superheat","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"@gif for i in eachindex(t)\n    plot(OHPSuper(),i,SimuResult)\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/#D-pressure","page":"Post-Processing","title":"2D pressure","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"@gif for i in eachindex(t)\n    plot(OHPPres(),i,SimuResult)\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/#Plot-2D-interpolated-curves","page":"Post-Processing","title":"Plot 2D interpolated curves","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/#Interpolate-2D-T-data-from-the-plate-for-fixed-sensors-on-the-plate","page":"Post-Processing","title":"Interpolate 2D T data from the plate for fixed sensors on the plate","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"place the 2D sensors","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"x2Dsensors = [-2.75,-1.4,-0.8,0.0,0.0,0.8,1.4,2.75] .* inches\ny2Dsensors = [0.0,   0.0, 0.0,0.0,0.4,0.0,0.0,0.0] .* inches\nplate_sensors = (x2Dsensors,y2Dsensors);\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"get the curve","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"t_hist,g_hist = getTcurve(plate_sensors,SimuResult);\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/#Read-experiment-T-data","page":"Post-Processing","title":"Read experiment T data","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"This part can be customized as long as you can get a matrix for RTD (sensor data) and an array for RTDt (time points)","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"import XLSX","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"read experiment file for ASETS-II data.","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"expfile = expfileDict[\"O002_H001_P040\"]\nexppath = \"../expdata/\"\nxf = XLSX.readxlsx(exppath*expfile);\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"get experiment data for ASETS-II data","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"Onum, Hnum, power_exp = getconfig(expfile)\nRTDt,RTD = getRTD(xf,Onum);\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/#D-interpolated-temperature-curve-at-fixed-sensors","page":"Post-Processing","title":"2D interpolated temperature curve at fixed sensors","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"RTD_for_plotting = [1,4,8];\nnothing #hide","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot OHP","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot(OHP(),SimuResult)","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot sensors","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"scatter!(x2Dsensors[RTD_for_plotting],y2Dsensors[RTD_for_plotting])\nannotate!(x2Dsensors[RTD_for_plotting], y2Dsensors[RTD_for_plotting].-0.005, RTD_for_plotting)","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot temperature curve","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot(OHPTcurve(),RTD_for_plotting,(t_hist,g_hist),SimuResult)\nplot!(OHPTexp() ,RTD_for_plotting,(RTDt,RTD)     ,SimuResult)","category":"page"},{"location":"manual/PostProcessing-oneresult/#D-interpolated-thermal-conductance","page":"Post-Processing","title":"2D interpolated thermal conductance","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"ihot = 4 # hot sensor  for calculating thermal conductance\nicold = 8 # cold sensor  for calculating thermal conductance;","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot them separately","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot(OHPCond(),(ihot,icold),(t_hist,g_hist),(RTDt,RTD),SimuResult)","category":"page"},{"location":"manual/PostProcessing-oneresult/#Liquid-slug-velocity-statistics","page":"Post-Processing","title":"Liquid slug velocity statistics","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"fix title and ylabel and legend","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plot(OHPV(), SimuResult::SimulationResult,ylimit=(-2,2))","category":"page"},{"location":"manual/PostProcessing-oneresult/#Plot-1D-interpolated-curves","page":"Post-Processing","title":"Plot 1D interpolated curves","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"@manipulate for i in 1:1:length(t)\n    plot(OHP1DT(),i,SimuResult,xlim=(1,2))\n    plot!(twinx(),OHPTwall(),i,SimuResult,xlim=(1,2))\n#     plot!(twinx(),OHP1DΔT(),i,SimuResult,xlim=(1,2))\n#     plot!(twinx(),OHP1DP(),i,SimuResult,xlim=(1,2))\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/#D-sensor-selector","page":"Post-Processing","title":"1D sensor selector","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"L = SimuResult.integrator_tube.p.tube.L\n@manipulate for ξ in 0:1e-3:L\n    plot(OHP(),SimuResult) # plot the ohp layout\n\n    xprobe,yprobe = oneDtwoDtransform(ξ,SimuResult)\n    scatter!([xprobe],[yprobe])\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/#Plot-1D-property-curve-for-a-fixed-location-sensor","page":"Post-Processing","title":"Plot 1D property curve for a fixed location sensor","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"xsensors1D = [2.097, 3.0, 4,4.1]\n\nθhist1D,phist1D = get1DTandP(xsensors1D, SimuResult);\n\nplot(t,θhist1D,label=string.(\"ξ=\", xsensors1D'),xlabel=\"time [s]\", ylabel=\"temperature [K]\")","category":"page"},{"location":"manual/PostProcessing-oneresult/#get-boiling-data-(if-there-are-any)","page":"Post-Processing","title":"get boiling data (if there are any)","text":"","category":"section"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"if length(SimuResult.boil_hist) != 0\nboil_data,boil_num_x,boil_num_t,t_boil,x2D_boil,y2D_boil,boil_dt = get_boil_matrix(SimuResult::SimulationResult);\nend","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"boiling frequency scatter graph (if there are any)","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plt = plot()\nif length(SimuResult.boil_hist) != 0\nplt = plot(OHP(),SimuResult)\nscatter!(x2D_boil,y2D_boil,\n    colorbar=true,markeralpha=delta.(boil_num_x),colorbar_title=\"\\n boiling frequency [Hz]\",right_margin=3Plots.mm,marker_z=boil_num_x./SimuResult.tube_hist_t[end],markerstrokewidth=0,markercolor=cgrad(:greys, rev = true))\nend\nplt","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"boiling frequency curve (if there are any)","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"plt = plot()\nif length(SimuResult.boil_hist) != 0\nplt = plot(t_boil,boil_num_t./boil_dt,\ncolor=:orange, legend=:topleft, ylabel=\"f [HZ]\",xlabel=\"time [s]\", label=\"overall boiling frequency\")\nend\nplt","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"","category":"page"},{"location":"manual/PostProcessing-oneresult/","page":"Post-Processing","title":"Post-Processing","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This readme file assumes user already installed the IJulia package and got the jupyter notebook running.","category":"page"},{"location":"#installation","page":"Home","title":"installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package, open julia REPL, and then run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/liyuxuan48/ComputationalHeatTransfer.jl.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You may also need to install some other packages to make the notebook run smoothly, such as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"Plots\") # plotting functions\nPkg.add(\"Interact\") # interactive features\nPkg.add(\"XLSX\") # reading the experiment file in .xlsx format\nPkg.add(\"ProgressMeter\") $ # having a progressbar when running the simulation","category":"page"},{"location":"","page":"Home","title":"Home","text":"After installing the packages, we need to run","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"Conda\")\nusing Conda\nConda.pip_interop(true)\nConda.pip(\"install\", \"webio_jupyter_extension\") # link the jupyter notebook with the Interact package","category":"page"},{"location":"","page":"Home","title":"Home","text":"this will make the interactive features for Interact package in the postprocessing notebook avaliable.","category":"page"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After installing the packages, we should perform one more step to migrate the example notebooks (hidden deeply among the julia source code files) to your working directory. I assume you already created a new directory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ComputationalHeatTransfer\ncd(\"/path/of/working/directory\") # navigate to your working directory\nsetup_examples(pwd())","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create three folders in your working directory: examples, expdata, and numedata. Then you can enjoy the notebooks in examples. To open jupyter notebook, you can run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using IJulia\nnotebook()","category":"page"}]
}
